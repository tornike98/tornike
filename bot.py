import asyncio
import asyncpg
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
async def create_db_pool():
    return await asyncpg.create_pool(DATABASE_URL)

db_pool = None

async def get_db():
    global db_pool
    if db_pool is None:
        db_pool = await create_db_pool()
    return db_pool

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
async def setup_db():
    db = await get_db()
    async with db.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                tg_id BIGINT UNIQUE NOT NULL,
                name TEXT NOT NULL,
                points INTEGER DEFAULT 0
            );
            CREATE TABLE IF NOT EXISTS matches (
                id SERIAL PRIMARY KEY,
                home_team TEXT NOT NULL,
                away_team TEXT NOT NULL,
                match_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            CREATE TABLE IF NOT EXISTS predictions (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(tg_id),
                match_id INTEGER REFERENCES matches(id),
                predicted_score TEXT NOT NULL
            );
            CREATE TABLE IF NOT EXISTS results (
                id SERIAL PRIMARY KEY,
                match_id INTEGER REFERENCES matches(id),
                final_score TEXT NOT NULL
            );
        """)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")],
        [KeyboardButton(text="–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")],
        [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π –ø—Ä–æ–≥–Ω–æ–∑")]
    ], resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")],
        [KeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏")]
    ], resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    db = await get_db()
    user_id = message.from_user.id

    async with db.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE tg_id=$1", user_id)
        if not user:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=user_keyboard)

# –í–Ω–µ—Å–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message()
async def set_name(message: Message):
    db = await get_db()
    user_id = message.from_user.id
    user_name = message.text

    async with db.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE tg_id=$1", user_id)
        if not user:
            await conn.execute("INSERT INTO users (tg_id, name) VALUES ($1, $2)", user_id, user_name)
            await message.answer("–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=user_keyboard)

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    db = await get_db()
    user_id = message.from_user.id

    async with db.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE tg_id=$1", user_id)
        if user:
            await message.answer(f"üë§ –ò–º—è: {user['name']}\nüèÜ –û—á–∫–∏: {user['points']}")
        else:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

# –í–Ω–µ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑
@dp.message(lambda message: message.text == "–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
async def make_prediction(message: Message):
    db = await get_db()
    user_id = message.from_user.id

    now = datetime.utcnow()
    friday_deadline = now.replace(hour=20, minute=0, second=0, microsecond=0) + timedelta((4 - now.weekday()) % 7)

    if now > friday_deadline:
        await message.answer("‚è≥ –ü—Ä–∏–µ–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    async with db.acquire() as conn:
        matches = await conn.fetch("SELECT * FROM matches WHERE id NOT IN (SELECT match_id FROM predictions WHERE user_id=$1)", user_id)
        if not matches:
            await message.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.")
            return

        for match in matches:
            await message.answer(f"{match['home_team']} - {match['away_team']}\n–í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2-1:")

# –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
@dp.message(lambda message: message.text == "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
async def show_leaderboard(message: Message):
    db = await get_db()

    async with db.acquire() as conn:
        top_users = await conn.fetch("SELECT name, points FROM users ORDER BY points DESC LIMIT 10")
        leaderboard = "\n".join([f"{idx+1}. {user['name']} - {user['points']} –æ—á–∫–æ–≤" for idx, user in enumerate(top_users)])
        await message.answer(f"üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n{leaderboard}")

# –í–Ω–µ—Å–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(lambda message: message.text == "–í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" and message.from_user.id == ADMIN_ID)
async def enter_results(message: Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

# –í–Ω–µ—Å–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(lambda message: message.text == "–í–Ω–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏" and message.from_user.id == ADMIN_ID)
async def enter_new_matches(message: Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await setup_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
